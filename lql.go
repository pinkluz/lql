package lql

import (
	"bytes"
	"fmt"
	"strings"

	"github.com/blugelabs/bluge"
)

// Parse the passed in query
func Parse(query []byte) (bluge.Query, []string, error) {
	if query == nil || len(query) == 0 {
		return nil, nil, &ParseNOP{}
	}

	toLex := &lex{
		fields: []string{},
		// Bleve ignores case so we just downcase to make life easy
		input: bytes.NewReader(bytes.ToLower(query)),
		errs:  []string{},
	}

	// Start the parser generated by goyacc
	code := yyParse(toLex)

	if len(toLex.errs) > 0 {
		return nil, nil, fmt.Errorf(strings.Join(toLex.errs, "\n"))
	}

	if code != 0 {
		return nil, nil, &UnknownParseError{}
	}

	return toLex.query, toLex.fields, nil
}
